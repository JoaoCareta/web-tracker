version: 2.1

# ----------------------------
# Orbs Section
# ----------------------------
orbs:
  android: circleci/android@2.3.0

# ----------------------------
# Executors Section
# ----------------------------
executors:
  android-executor:
    docker:
      - image: cimg/android:2024.01
    resource_class: medium
    environment:
      GRADLE_OPTS: "-Dkotlin.compiler.execution.strategy=in-process"

# ----------------------------
# References Section
# ----------------------------
references:
  workspace: &workspace
               ~/code

  android_config: &android_config
    working_directory: *workspace
    executor: android-executor

# ----------------------------
# Commands Section
# ----------------------------
commands:
  set-android-java-version:
    steps:
      - android/change-java-version:
          java-version: 17

  setup-firebase:
    steps:
      - run:
          name: Install Firebase CLI
          command: curl -sL https://firebase.tools | bash

  setup-keystore:
    steps:
      - run:
          name: Setup Keystore
          command: |
            # Mostra o diretório de trabalho
            echo "Working directory: $PWD"

            # Cria um diretório temporário para a keystore
            mkdir -p ${PWD}/app/keystore

            # Define o caminho completo da keystore
            KEYSTORE_PATH="${PWD}/app/keystore/release.keystore"
            echo "Keystore path: $KEYSTORE_PATH"

            # Verifica se a variável ENCODED_KEYSTORE existe
            if [ -z "$ENCODED_KEYSTORE" ]; then
              echo "ERROR: ENCODED_KEYSTORE is empty or not set"
              exit 1
            fi

            # Decodifica a keystore
            echo $ENCODED_KEYSTORE | base64 -d > $KEYSTORE_PATH

            # Verifica se o arquivo foi criado e seu tamanho
            if [ -f "$KEYSTORE_PATH" ]; then
              echo "Keystore created successfully"
              ls -la $KEYSTORE_PATH
              echo "Keystore size: $(wc -c < $KEYSTORE_PATH) bytes"
            else
              echo "ERROR: Failed to create keystore file"
              exit 1
            fi

            # Ajusta as permissões
            chmod 600 $KEYSTORE_PATH

  setup-mapbox:
    steps:
      - run:
          name: Setup Mapbox Token
          command: |
            if [ -z "$MAPBOX_ACCESS_TOKEN" ]; then
              echo "ERROR: MAPBOX_ACCESS_TOKEN is not set"
              exit 1
            fi

            # Cria local.properties se não existir
            touch local.properties

            # Remove linha antiga do MAPBOX_ACCESS_TOKEN se existir
            sed -i '/MAPBOX_ACCESS_TOKEN/d' local.properties

            # Adiciona novo token
            echo "MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN" >> local.properties

            # Mostra o conteúdo do arquivo (sem mostrar o token completo)
            echo "Content of local.properties (masked):"
            cat local.properties | sed 's/\(MAPBOX_ACCESS_TOKEN=\).*/\1****/'

# ----------------------------
# Jobs Section
# ----------------------------
jobs:
  # Tests and Code Quality
  test-and-sonar:
    <<: *android_config
    steps:
      - set-android-java-version
      - checkout
      - android/restore-gradle-cache
      - setup-mapbox
      - setup-keystore
      - run:
          name: Run Tests and Generate Coverage
          command: |
            make test
            make coverage
            
            # Criar diretório para relatórios
            mkdir -p coverage-reports
            find . -name "jacocoTestReport*.xml" -exec cp {} coverage-reports/ \; || echo "No coverage reports found"
      - run:
          name: Execute SonarQube Scanner
          command: |
            ./gradlew sonar \
              -Dsonar.token="$SONAR_TOKEN" \
              -Dsonar.junit.reportPaths=**/build/test-results/testStagingDebugUnitTest \
              -Dsonar.coverage.jacoco.xmlReportPaths=**/build/reports/jacoco/jacocoTestReport-staging-unified/jacocoTestReport-staging-unified.xml \
              -Dsonar.androidLint.reportPaths=**/build/reports/lint-results-stagingDebug.xml \
              -Dsonar.java.binaries=**/build/intermediates/javac/stagingDebug/classes \
              -Dsonar.kotlin.binaries=**/build/tmp/kotlin-classes/stagingDebug
      - store_artifacts:
          path: app/build/reports/jacoco/jacocoTestReport-staging-unified/html
          destination: reports/coverage-html
      - store_artifacts:
          path: app/build/reports/jacoco/jacocoTestReport-staging-unified/jacocoTestReport-staging-unified.xml
          destination: reports/coverage-xml
      - android/save-gradle-cache

  # Deployment
  deploy-qa:
    <<: *android_config
    steps:
      - set-android-java-version
      - checkout
      - setup-mapbox
      - setup-keystore
      - setup-firebase
      - run:
          name: Build and Deploy
          command: |
            make build-staging
            make deploy-firebase
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: apks/

# ----------------------------
# Workflows Section
# ----------------------------
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test-and-sonar
      - deploy-qa:
          requires:
            - test-and-sonar
          filters:
            branches:
              only: main
