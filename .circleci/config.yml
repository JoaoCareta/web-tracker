version: 2.1

# ----------------------------
# Orbs Section
# ----------------------------
orbs:
  android: circleci/android@2.3.0
  sonarcloud: sonarsource/sonarcloud@2.0.0

# ----------------------------
# Executors Section
# ----------------------------
executors:
  android-executor:
    docker:
      - image: cimg/android:2024.01
    resource_class: medium
    environment:
      JAVA_TOOL_OPTIONS: "-Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=100"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1 -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=-Xmx2g"

# ----------------------------
# References Section
# ----------------------------
references:
  workspace: &workspace
               ~/code

  android_config: &android_config
    working_directory: *workspace
    executor: android-executor

# ----------------------------
# Commands Section
# ----------------------------
commands:
  set-android-java-version:
    steps:
      - android/change-java-version:
          java-version: 17

  setup-firebase:
    steps:
      - run:
          name: Install Firebase CLI
          command: curl -sL https://firebase.tools | bash

  setup-keystore:
    steps:
      - run:
          name: Setup Keystore
          command: |
            # Mostra o diretório de trabalho
            echo "Working directory: $PWD"
            
            # Cria um diretório temporário para a keystore
            mkdir -p ${PWD}/app/keystore
            
            # Define o caminho completo da keystore
            KEYSTORE_PATH="${PWD}/app/keystore/release.keystore"
            echo "Keystore path: $KEYSTORE_PATH"
            
            # Verifica se a variável ENCODED_KEYSTORE existe
            if [ -z "$ENCODED_KEYSTORE" ]; then
              echo "ERROR: ENCODED_KEYSTORE is empty or not set"
              exit 1
            fi
            
            # Decodifica a keystore
            echo $ENCODED_KEYSTORE | base64 -d > $KEYSTORE_PATH
            
            # Verifica se o arquivo foi criado e seu tamanho
            if [ -f "$KEYSTORE_PATH" ]; then
              echo "Keystore created successfully"
              ls -la $KEYSTORE_PATH
              echo "Keystore size: $(wc -c < $KEYSTORE_PATH) bytes"
            else
              echo "ERROR: Failed to create keystore file"
              exit 1
            fi
            
            # Ajusta as permissões
            chmod 600 $KEYSTORE_PATH

  optimize-gradle-build:
    steps:
      - run:
          name: Optimize Gradle Build
          command: |
            # Limpa o cache do Gradle
            rm -rf ~/.gradle/caches/
            # Configura o Gradle para modo offline
            mkdir -p ~/.gradle
            echo "org.gradle.parallel=false" >> ~/.gradle/gradle.properties
            echo "org.gradle.workers.max=1" >> ~/.gradle/gradle.properties
            echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
            echo "org.gradle.jvmargs=-Xmx2g -XX:+HeapDumpOnOutOfMemoryError" >> ~/.gradle/gradle.properties

# ----------------------------
# Jobs Section
# (Altere os nomes dos jobs abaixo se desejar: build-and-detekt, test-and-sonar, deploy-qa)
# ----------------------------
jobs:
  # Debug Environment
  debug-environment:
    <<: *android_config
    steps:
      - checkout
      - run:
          name: Debug Environment
          command: |
            echo "Workspace: $PWD"
            echo "List of environment variables:"
            env | grep -v ENCODED_KEYSTORE
            echo "Directory structure:"
            ls -R

  # Build and Static Analysis
  build-and-detekt:
    <<: *android_config
    steps:
      - set-android-java-version
      - checkout
      - android/restore-gradle-cache
      - setup-keystore
      - optimize-gradle-build
      - run:
          name: Set Gradlew Permissions
          command: make permissions
      - run:
          name: Clean Project
          command: make clean
      - run:
          name: Run Detekt
          command: |
            ./gradlew detekt \
            --no-daemon \
            --max-workers 1
      - run:
          name: Build Staging
          command: |
            ./gradlew assembleStagingRelease \
            --no-daemon \
            --max-workers 1 \
            --stacktrace \
            -Dkotlin.compiler.execution.strategy=in-process
      - store_artifacts:
          path: build/reports/detekt
          destination: reports/detekt
      - android/save-gradle-cache

  # Tests and Code Quality
  test-and-sonar:
    <<: *android_config
    steps:
      - set-android-java-version
      - checkout
      - android/restore-gradle-cache
      - setup-keystore
      - optimize-gradle-build
      - run:
          name: Clean Project
          command: make clean
      - run:
          name: Run Tests
          command: |
            ./gradlew test \
            --no-daemon \
            --max-workers 1 \
            --stacktrace \
            -Dkotlin.compiler.execution.strategy=in-process
      - run:
          name: Generate Coverage Reports
          command: |
            ./gradlew jacocoTestReport \
            --no-daemon \
            --max-workers 1
      - sonarcloud/scan
      - store_artifacts:
          path: app/build/reports/jacoco/jacocoTestReport-staging-unified/html
          destination: reports/coverage
      - store_artifacts:
          path: app/build/reports/jacoco/jacocoTestReport-staging-unified/jacocoTestReport-staging-unified.xml
          destination: reports/coverage-xml
      - store_test_results:
          path: build/test-results
      - android/save-gradle-cache

  # Deployment
  deploy-qa:
    <<: *android_config
    steps:
      - set-android-java-version
      - checkout
      - attach_workspace:
          at: .
      - setup-keystore
      - setup-firebase
      - optimize-gradle-build
      - run:
          name: Build Staging App
          command: |
            ./gradlew assembleStagingRelease \
            --no-daemon \
            --max-workers 1 \
            --stacktrace \
            -Dkotlin.compiler.execution.strategy=in-process
      - run:
          name: Deploy to Firebase
          command: make deploy-firebase
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: apks/

# ----------------------------
# Workflows Section
# ----------------------------
workflows:
  version: 2
  build-test-deploy:
    jobs:
      # Debug Environment
      - debug-environment

      # Build and Analysis
      - build-and-detekt:
          requires:
            - debug-environment

      # Tests and Quality Gate
      - test-and-sonar:
          requires:
            - build-and-detekt

      # Deploy to QA
      - deploy-qa:
          requires:
            - test-and-sonar
          filters:
            branches:
              only: main
