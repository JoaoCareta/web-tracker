apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.11'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

private static void addPathIfExists(List<String> paths,
                                    String directoryPath) {
    if (new File(directoryPath).exists())
        paths.add(directoryPath)
}

private static void addFileTreeIfExists(Project project, List<FileTree> fileTrees,
                                        String directoryPath, List<String> excludeFilter = []) {
    if (new File(directoryPath).exists())
        fileTrees.add(project.fileTree(dir: directoryPath, excludes: excludeFilter))
}

static List<String> findSourceDirectories(Project project, String flavor = "", String buildType = "debug") {

    final sourcePaths = []

    // Main
    addPathIfExists(sourcePaths, "${project.projectDir}/src/main/java")
    addPathIfExists(sourcePaths, "${project.projectDir}/src/main/kotlin")

    // Flavor
    if (!flavor.isEmpty()) {
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$flavor/java")
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$flavor/kotlin")
    }

    // BuildType
    if (!buildType.isEmpty()) {
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$buildType/java")
        addPathIfExists(sourcePaths, "${project.projectDir}/src/$buildType/kotlin")
    }
    return sourcePaths
}

static List<ConfigurableFileTree> findClassDirectories(Project project, String flavor = "", String buildType = "debug") {

    final filter = [
            java  : [
                    '**/R.class', '**/R$*.class',
                    '**/BuildConfig.*', '**/*$SavedState*',
                    '**/*Binding*.class', '**/databinding/**',
                    '**/generated/**', '**/BR*',
                    '**/DataBinder*', '**/*OnClickListener*',
                    '**/*Application.class',
                    '**/*Dao.class',
                    '**/WebTrackerApplication.class',
                    '**/WebTrackerApplication$*.class',
                    '**/MainActivity.class',
                    '**/MainActivity*.class',
                    '**/*Activity.class',
                    '**/*Activity*.class',
                    '**/*Dialog.class',
                    '**/*Adapter.class',
                    '**/*Delegate.class',
                    '**/App.class',
                    '**/*Extensions.class',
                    '**/*Extension.class',
                    '**/converters/**',
                    '**/*Constants.class',
                    '**/*DataSource.class',
                    '**/*Module.class',
                    'common/metadata-db/**',
                    '**/*Injection.class',
                    '**/*FlagsImpl.class',
                    '**/*DataHolder.class',
                    '**/DialogTemplates.class',
                    '**/*Dto.class',
                    '**/*Screen.class',
                    '**/model/**',
                    '**/models/**',
                    '**/*View.class',
                    '**/*Layout.class',
                    '**/viewholders/**',
                    '**/screens/**',
                    '**/migrations/**',
                    '**/*DAO.class',
                    '**/RawTrackingDataReader.class',
                    '**/ui/components/**',
                    '**/ui/**',
                    '**/common/design-system/**',
                    '**/common/utils/**',
                    '**/core/coroutine/**',
                    '**/core/database/**',
                    '**/core/datastore/**',
                    '**/core/di/**',
                    '**/core/logger/**',
                    '**/core/navigation/**',
                    '**/core/util/**',
                    '**/core/**',
                    '**/authentication/authentication-data/**',
                    '**/authentication/authentication-domain/di/**',
                    '**/authentication/authentication-presentation/events/**',
                    '**/authentication/authentication-presentation/state/**',
                    '**/authentication/authentication-presentation/ui/**',
                    '**/webtracker/navigation/**',
                    '**/webtracker/di/**',
                    '**/webtracker/application/**',
                    '**/*Test.class',
                    '**/androidTest/**',
                    '**/test/**',
                    '**/R.class', '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/*JsonAdapter.*',
                    '**/*$DefaultImpls.class',
                    '**/*inlined*',
                    '**/*Directions*.class',
                    '**/*OnClickListener*',
                    '**/analytics/*',
                    '**/test/*',
                    '**/*$Lambda*.class',
            ],
            kotlin: [
                      '**/*JsonAdapter.*', '**/*$DefaultImpls.class',
                      '**/*inlined*', '**/*Directions*.class', '**/*OnClickListener*',
                      '**/test/*', '**/analytics/*',
                      '**/*Application.class',
                      '**/*Dao.class',
                      '**/WebTrackerApplication.class',
                      '**/WebTrackerApplication$*.class',
                      '**/MainActivity.class',
                      '**/MainActivity*.class',
                      '**/*Activity.class',
                      '**/*Activity*.class',
                      '**/*Dialog.class',
                      '**/*Adapter.class',
                      '**/*Delegate.class',
                      '**/App.class',
                      '**/*Extensions.class',
                      '**/*Extension.class',
                      '**/converters/**',
                      '**/*Constants.class',
                      '**/*DataSource.class',
                      '**/*Module.class',
                      'common/metadata-db/**',
                      '**/*Injection.class',
                      '**/*FlagsImpl.class',
                      '**/*DataHolder.class',
                      '**/DialogTemplates.class',
                      '**/*Dto.class',
                      '**/*Screen.class',
                      '**/model/**',
                      '**/models/**',
                      '**/*View.class',
                      '**/*Layout.class',
                      '**/viewholders/**',
                      '**/screens/**',
                      '**/migrations/**',
                      '**/*DAO.class',
                      '**/RawTrackingDataReader.class',
                      '**/ui/components/**',
                      '**/ui/**',
                      '**/common/design-system/**',
                      '**/common/utils/**',
                      '**/core/coroutine/**',
                      '**/core/database/**',
                      '**/core/datastore/**',
                      '**/core/di/**',
                      '**/core/logger/**',
                      '**/core/navigation/**',
                      '**/core/util/**',
                      '**/core/**',
                      '**/authentication/authentication-data/**',
                      '**/authentication/authentication-domain/di/**',
                      '**/authentication/authentication-presentation/events/**',
                      '**/authentication/authentication_presentation/state/**',
                      '**/authentication/authentication-presentation/ui/**',
                      '**/webtracker/navigation/**',
                      '**/webtracker/di/**',
                      '**/webtracker/application/**',
                      '**/*Test.class',
                      '**/androidTest/**',
                      '**/test/**',
                      '**/*$Lambda*.class',
            ]
    ]

    final classPaths = []

    // BuildType
    if (!buildType.isEmpty()) {
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/classes/$buildType", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/javac/$buildType/compile${buildType.capitalize()}JavaWithJavac", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/tmp/kotlin-classes/$buildType", filter.kotlin)
    }

    // Flavor
    if (!flavor.isEmpty()) {
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/classes/$flavor/$buildType", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/intermediates/javac/$flavor${buildType.capitalize()}/compile${flavor.capitalize()}${buildType.capitalize()}JavaWithJavac", filter.java)
        addFileTreeIfExists(project, classPaths, "${project.buildDir}/tmp/kotlin-classes/$flavor${buildType.capitalize()}", filter.kotlin)
    }

    return classPaths
}

static List<String> findCoverageFiles(String flavor = "", String buildType = "debug") {
    if (flavor.isEmpty()) {
        return [
            "jacoco/test${buildType.capitalize()}UnitTest.exec",
            "outputs/unit_test_code_coverage/${buildType}UnitTest/*.exec"
        ]
    } else {
        return [
            "jacoco/test${flavor.capitalize()}${buildType.capitalize()}UnitTest.exec",
            "outputs/unit_test_code_coverage/${flavor}${buildType.capitalize()}UnitTest/*.exec"
        ]
    }
}

static List<Project> listAllChildProjectWithoutChilds(Project project) {
    final childProjects = []

    if (project.childProjects.isEmpty()) {
        childProjects.add(project)
    } else {
        project.childProjects.each {
            childPair ->
                childProjects.addAll(listAllChildProjectWithoutChilds(childPair.value))
        }
    }
    return childProjects
}

ext {
    findSourceDirectories = this.&findSourceDirectories
    findClassDirectories = this.&findClassDirectories
    findCoverageFiles = this.&findCoverageFiles
    listAllChildProjectWithoutChilds = this.&listAllChildProjectWithoutChilds

    minCoverage = 0.70
}
