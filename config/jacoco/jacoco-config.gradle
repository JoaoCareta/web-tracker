def jacocoTaskName = "jacocoTestReport-staging-unified"

tasks.register(jacocoTaskName, JacocoReport) {
    dependsOn 'testStagingDebugUnitTest'

    reports {
        xml.required = true
        html.required = true
    }

    def excludes = [
            '**/*Application.class',
            '**/WebTrackerApplication.class',
            '**/WebTrackerApplication$*.class',
            '**/MainActivity.class',
            '**/MainActivity*.class',
            '**/*Activity.class',
            '**/*Activity*.class',
            '**/*Activity.kt',
            '**/*Dialog.kt',
            '**/*Adapter.kt',
            '**/*Delegate.kt',
            '**/App.kt',
            '**/*Extensions.kt',
            '**/*Extension.kt',
            '**/converters/**',
            '**/*Constants.kt',
            '**/*DataSource.kt',
            '**/*Module.kt',
            'common/metadata-db/**',
            '**/*Injection.kt',
            '**/*FlagsImpl.kt',
            '**/*DataHolder.kt',
            '**/DialogTemplates.kt',
            '**/*Dto.kt',
            '**/*Screen.kt',
            '**/model/**',
            '**/models/**',
            '**/*View.kt',
            '**/*Layout.kt',
            '**/viewholders/**',
            '**/screens/**',
            '**/migrations/**',
            '**/*DAO.kt',
            '**/RawTrackingDataReader.kt',
            '**/ui/components/**',
            '**/ui/**',
            '**/common/design-system/**',
            '**/features/authentication-presentation/src/main/java/**/events/**',
            '**/features/authentication-presentation/src/main/java/**/state/**',
            '**/features/authentication-presentation/src/main/java/**/ui/**',
            '**/core/navigation/**',
            '**/core/util/**',
            '**/webtracker/navigation/**',
    ]

    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/stagingDebug/classes", excludes: excludes)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/stagingDebug", excludes: excludes)

    classDirectories.from = files([javaClasses, kotlinClasses])
    sourceDirectories.from = files([
            "${project.projectDir}/src/main/java",
            "${project.projectDir}/src/main/kotlin",
            "${project.projectDir}/src/staging/java",
            "${project.projectDir}/src/staging/kotlin",
            "${project.projectDir}/src/debug/java",
            "${project.projectDir}/src/debug/kotlin"
    ])
    executionData.from = files("${project.buildDir}/outputs/unit_test_code_coverage/stagingDebugUnitTest/testStagingDebugUnitTest.exec")
}